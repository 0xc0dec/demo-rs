use imgui::Condition;

use crate::state::State;
use crate::render::Ui;

pub struct Hud;

// TODO Ideally every component should have the possibility to render something to the UI.
// So far I haven't been able to pass the `frame` reference around to allow for that,
// the the UI rendering code continues to be a "singleton". Maybe the UI rendering should be done
// as a list of commands generated by various components and then fed to the Ui component.
impl Hud {
    pub fn build(&mut self, dt: f32, state: &State, ui: &mut Ui) {
        ui.prepare_frame(dt, &state.window, |frame| {
            let window = frame.window("Info");
            window
                .always_auto_resize(true)
                .size([300.0, 150.0], Condition::FirstUseEver)
                .position([20.0, 20.0], Condition::FirstUseEver)
                .build(|| {
                    frame.text("Controls:");
                    frame.text("Tab: capture/release mouse");
                    frame.text("WASDQE: move camera while mouse is captured");
                    frame.text("F: spawn a box");
                    frame.text("Left mouse click: grab/release an object");
                    frame.separator();
                    frame.text(format!("Using adapter {}", state.renderer.adapter_name));
                    let mouse_pos = frame.io().mouse_pos;
                    // Sometimes the coordinates are reported as very big negative numbers, e.g.
                    // when the app just starts.
                    frame.text(format!(
                        "Mouse position: ({:.1},{:.1})",
                        if mouse_pos[0] >= 0f32 {
                            mouse_pos[0]
                        } else {
                            0f32
                        },
                        if mouse_pos[1] >= 0f32 {
                            mouse_pos[1]
                        } else {
                            0f32
                        }
                    ));
                    frame.text(format!("Frame time: {dt:?}"));
                });
        })
    }
}
